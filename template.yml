AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless VPC Management API

Resources:
  VpcTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VpcResources
      AttributeDefinitions:
        - AttributeName: resourceId
          AttributeType: S
      KeySchema:
        - AttributeName: resourceId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: VpcApiUserPool
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: VpcApiClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
         
  VpcApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False
      DefinitionBody:
        swagger: "2.0"
        info:
          title: VPC Management API
        paths:
          /vpc:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:xx23827XXXXX:function:sample/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:xx23827xxxxx:function:get_sample/invocations
              responses: {}